// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipsvc.proto

/*
Package ipsvc is a generated protocol buffer package.

It is generated from these files:
	ipsvc.proto

It has these top-level messages:
	IPRequest
	IPReply
	IPsRequest
	IPsReply
*/
package ipsvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IPRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *IPRequest) Reset()                    { *m = IPRequest{} }
func (m *IPRequest) String() string            { return proto.CompactTextString(m) }
func (*IPRequest) ProtoMessage()               {}
func (*IPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type IPReply struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	City string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	Loc  string `protobuf:"bytes,3,opt,name=loc" json:"loc,omitempty"`
}

func (m *IPReply) Reset()                    { *m = IPReply{} }
func (m *IPReply) String() string            { return proto.CompactTextString(m) }
func (*IPReply) ProtoMessage()               {}
func (*IPReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IPReply) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPReply) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *IPReply) GetLoc() string {
	if m != nil {
		return m.Loc
	}
	return ""
}

type IPsRequest struct {
	Ips []*IPRequest `protobuf:"bytes,1,rep,name=ips" json:"ips,omitempty"`
}

func (m *IPsRequest) Reset()                    { *m = IPsRequest{} }
func (m *IPsRequest) String() string            { return proto.CompactTextString(m) }
func (*IPsRequest) ProtoMessage()               {}
func (*IPsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPsRequest) GetIps() []*IPRequest {
	if m != nil {
		return m.Ips
	}
	return nil
}

type IPsReply struct {
	Ipr []*IPReply `protobuf:"bytes,1,rep,name=ipr" json:"ipr,omitempty"`
}

func (m *IPsReply) Reset()                    { *m = IPsReply{} }
func (m *IPsReply) String() string            { return proto.CompactTextString(m) }
func (*IPsReply) ProtoMessage()               {}
func (*IPsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPsReply) GetIpr() []*IPReply {
	if m != nil {
		return m.Ipr
	}
	return nil
}

func init() {
	proto.RegisterType((*IPRequest)(nil), "ipsvc.IPRequest")
	proto.RegisterType((*IPReply)(nil), "ipsvc.IPReply")
	proto.RegisterType((*IPsRequest)(nil), "ipsvc.IPsRequest")
	proto.RegisterType((*IPsReply)(nil), "ipsvc.IPsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IPSVC service

type IPSVCClient interface {
	IPQuery(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*IPReply, error)
	IPSQuery(ctx context.Context, in *IPsRequest, opts ...grpc.CallOption) (*IPsReply, error)
	IPStreamQuery(ctx context.Context, opts ...grpc.CallOption) (IPSVC_IPStreamQueryClient, error)
}

type iPSVCClient struct {
	cc *grpc.ClientConn
}

func NewIPSVCClient(cc *grpc.ClientConn) IPSVCClient {
	return &iPSVCClient{cc}
}

func (c *iPSVCClient) IPQuery(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*IPReply, error) {
	out := new(IPReply)
	err := grpc.Invoke(ctx, "/ipsvc.IPSVC/IPQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPSVCClient) IPSQuery(ctx context.Context, in *IPsRequest, opts ...grpc.CallOption) (*IPsReply, error) {
	out := new(IPsReply)
	err := grpc.Invoke(ctx, "/ipsvc.IPSVC/IPSQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPSVCClient) IPStreamQuery(ctx context.Context, opts ...grpc.CallOption) (IPSVC_IPStreamQueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IPSVC_serviceDesc.Streams[0], c.cc, "/ipsvc.IPSVC/IPStreamQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &iPSVCIPStreamQueryClient{stream}
	return x, nil
}

type IPSVC_IPStreamQueryClient interface {
	Send(*IPRequest) error
	Recv() (*IPReply, error)
	grpc.ClientStream
}

type iPSVCIPStreamQueryClient struct {
	grpc.ClientStream
}

func (x *iPSVCIPStreamQueryClient) Send(m *IPRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iPSVCIPStreamQueryClient) Recv() (*IPReply, error) {
	m := new(IPReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for IPSVC service

type IPSVCServer interface {
	IPQuery(context.Context, *IPRequest) (*IPReply, error)
	IPSQuery(context.Context, *IPsRequest) (*IPsReply, error)
	IPStreamQuery(IPSVC_IPStreamQueryServer) error
}

func RegisterIPSVCServer(s *grpc.Server, srv IPSVCServer) {
	s.RegisterService(&_IPSVC_serviceDesc, srv)
}

func _IPSVC_IPQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPSVCServer).IPQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsvc.IPSVC/IPQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPSVCServer).IPQuery(ctx, req.(*IPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPSVC_IPSQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPSVCServer).IPSQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsvc.IPSVC/IPSQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPSVCServer).IPSQuery(ctx, req.(*IPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPSVC_IPStreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IPSVCServer).IPStreamQuery(&iPSVCIPStreamQueryServer{stream})
}

type IPSVC_IPStreamQueryServer interface {
	Send(*IPReply) error
	Recv() (*IPRequest, error)
	grpc.ServerStream
}

type iPSVCIPStreamQueryServer struct {
	grpc.ServerStream
}

func (x *iPSVCIPStreamQueryServer) Send(m *IPReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iPSVCIPStreamQueryServer) Recv() (*IPRequest, error) {
	m := new(IPRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IPSVC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipsvc.IPSVC",
	HandlerType: (*IPSVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IPQuery",
			Handler:    _IPSVC_IPQuery_Handler,
		},
		{
			MethodName: "IPSQuery",
			Handler:    _IPSVC_IPSQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IPStreamQuery",
			Handler:       _IPSVC_IPStreamQuery_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ipsvc.proto",
}

func init() { proto.RegisterFile("ipsvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x2c, 0x28, 0x2e,
	0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xa4, 0xb9, 0x38, 0x3d,
	0x03, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x0b, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x32, 0x0b, 0x94, 0xec, 0xb9, 0xd8, 0x41, 0x92, 0x05, 0x39,
	0x95, 0xe8, 0x52, 0x42, 0x42, 0x5c, 0x2c, 0xc9, 0x99, 0x25, 0x95, 0x12, 0x4c, 0x60, 0x11, 0x30,
	0x5b, 0x48, 0x80, 0x8b, 0x39, 0x27, 0x3f, 0x59, 0x82, 0x19, 0x2c, 0x04, 0x62, 0x2a, 0x19, 0x70,
	0x71, 0x79, 0x06, 0x14, 0xc3, 0x8c, 0x57, 0xe2, 0x62, 0xce, 0x2c, 0x28, 0x96, 0x60, 0x54, 0x60,
	0xd6, 0xe0, 0x36, 0x12, 0xd0, 0x83, 0xb8, 0x06, 0x6e, 0x7b, 0x10, 0x48, 0x52, 0x49, 0x87, 0x8b,
	0x03, 0xac, 0x03, 0x64, 0xa7, 0x02, 0x48, 0x7d, 0x11, 0x54, 0x3d, 0x1f, 0x92, 0xfa, 0x82, 0x9c,
	0x4a, 0x90, 0xea, 0x22, 0xa3, 0x85, 0x8c, 0x5c, 0xac, 0x9e, 0x01, 0xc1, 0x61, 0xce, 0x42, 0xba,
	0x20, 0xa7, 0x06, 0x96, 0xa6, 0x16, 0x55, 0x0a, 0x61, 0x98, 0x2c, 0x85, 0xa6, 0x57, 0x89, 0x41,
	0xc8, 0x00, 0x64, 0x4d, 0x30, 0x44, 0xbd, 0x20, 0x5c, 0x16, 0xe6, 0x52, 0x29, 0x7e, 0x64, 0x21,
	0x88, 0x0e, 0x73, 0x2e, 0x5e, 0xcf, 0x80, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0xa2, 0xad, 0xd1,
	0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0x87, 0xb7, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xdb,
	0x2e, 0xee, 0x7e, 0x01, 0x00, 0x00,
}
